// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id            String   @id @default(uuid())
  name          String
  businessType  String
  contactEmail  String
  contactPhone  String?
  address       String?      // NEW
  currency      String?      // NEW
  timezone      String?      // NEW
  invoiceFooter String?      // NEW
  logoUrl       String?      // NEW
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  users         User[]
  products      Product[]
  inventories   Inventory[]
  sales         Sale[]
  tenantModules TenantModule[]
}

model User {
  id           String           @id @default(uuid())
  email        String           @unique
  password     String
  name         String
  role         String           // e.g., 'owner', 'manager', 'cashier'
  tenantId     String
  tenant       Tenant           @relation(fields: [tenantId], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  sales        Sale[]
  mpesaTransactions MpesaTransaction[]
  permissions  UserPermission[]
}

model Permission {
  id          String           @id @default(uuid())
  key         String           @unique
  description String?
  users       UserPermission[]
}

model UserPermission {
  id           String   @id @default(uuid())
  userId       String
  permissionId String
  grantedBy    String?    // NEW: who granted this permission
  grantedAt    DateTime?  // NEW: when was it granted
  note         String?    // NEW: optional note
  user         User     @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
}

model Product {
  id           String   @id @default(uuid())
  name         String
  sku          String
  price        Float
  description  String?
  stock        Int      @default(0)
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  inventory    Inventory[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  saleItems    SaleItem[]
  customFields Json?
}

model Inventory {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sale {
  id           String     @id @default(uuid())
  tenantId     String
  tenant       Tenant     @relation(fields: [tenantId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  total        Float
  paymentType  String
  items        SaleItem[]
  createdAt    DateTime   @default(now())
  customerName String?
  customerPhone String?
  mpesaTransactionId String? @unique
  mpesaTransaction   MpesaTransaction? @relation(fields: [mpesaTransactionId], references: [id])
}

model SaleItem {
  id        String   @id @default(uuid())
  saleId    String
  sale      Sale     @relation(fields: [saleId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Module {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  tenants     TenantModule[]
}

model TenantModule {
  id        String   @id @default(uuid())
  tenantId  String
  moduleId  String
  enabled   Boolean  @default(true)
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  module    Module   @relation(fields: [moduleId], references: [id])
}

model MpesaTransaction {
  id             String   @id @default(uuid())
  userId         String?  // Optional: link to User if available
  user           User?    @relation(fields: [userId], references: [id])
  phoneNumber    String
  amount         Float
  status         String   // e.g., 'pending', 'success', 'failed'
  mpesaReceipt   String?  // M-Pesa transaction ID (MpesaReceiptNumber)
  merchantRequestId String?
  checkoutRequestId String?
  responseCode   String?
  responseDesc   String?
  message        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  sale           Sale?    @relation
  saleData        Json?    // Store pending sale/cart data for later use
}