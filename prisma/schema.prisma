generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String             @id @default(uuid())
  email                   String             @unique
  password                String
  name                    String
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  resetPasswordExpires    DateTime?
  resetPasswordToken      String?
  language                String?
  notificationPreferences Json?
  region                  String?
  branchId                String?
  isSuperadmin            Boolean            @default(false)
  tenantId                String?
  isActive                Boolean            @default(true)
  emailVerificationToken  String?            @unique
  emailVerified           Boolean            @default(false)
  failedLoginAttempts     Int                @default(0)
  accountLocked           Boolean            @default(false)
  lastLogin               DateTime?
  refreshTokens           RefreshToken[]
  sessions                Session[]
  AuditLog                AuditLog[]
  MpesaTransaction        MpesaTransaction[]
  Notification            Notification[]
  Sale                    Sale[]
  Subscription            Subscription[]
  Branch                  Branch?            @relation("UserBranch", fields: [branchId], references: [id])
  tenant                  Tenant?            @relation(fields: [tenantId], references: [id])
  UserBranchRole          UserBranchRole[]   @relation("UserUserBranchRoles")
  userPermissions         UserPermission[]   @relation("UserUserPermissions")
  grantedPermissions      UserPermission[]   @relation("UserPermissions")
  userRoles               UserRole[]         @relation("UserUserRoles")
  branchPermissions       BranchPermission[] @relation("UserBranchPermissions")

  @@index([email])
  @@index([branchId])
  @@index([resetPasswordToken])
}

model Role {
  id                String             @id @default(uuid())
  name              String
  description       String?
  isSystemRole      Boolean            @default(false)
  createdAt         DateTime           @default(now())
  tenantId          String?
  updatedAt         DateTime           @updatedAt
  tenant            Tenant?            @relation(fields: [tenantId], references: [id])
  permissions       RolePermission[]
  UserBranchRole    UserBranchRole[]   @relation("RoleUserBranchRoles")
  userRoles         UserRole[]         @relation("RoleUserRoles")
  branchPermissions BranchPermission[] @relation("RoleBranchPermissions")

  @@unique([name, tenantId])
}

model Permission {
  id                String             @id @default(uuid())
  name              String             @unique
  description       String?
  rolePermissions   RolePermission[]
  userPermissions   UserPermission[]   @relation("PermissionUserPermissions")
  branchPermissions BranchPermission[] @relation("PermissionBranchPermissions")
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  branchId  String? // Optional branch ID for branch-specific roles
  tenantId  String
  role      Role     @relation("RoleUserRoles", fields: [roleId], references: [id])
  branch    Branch?  @relation("BranchUserRoles", fields: [branchId], references: [id])
  tenant    Tenant   @relation("TenantUserRoles", fields: [tenantId], references: [id])
  user      User     @relation("UserUserRoles", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, roleId, branchId, tenantId])
  @@index([roleId])
  @@index([branchId])
  @@index([tenantId])
  @@index([userId])
}

// Branch-specific permissions
model BranchPermission {
  id           String   @id @default(uuid())
  branchId     String
  permissionId String
  roleId       String?
  userId       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  branch     Branch     @relation("BranchPermissions", fields: [branchId], references: [id])
  permission Permission @relation("PermissionBranchPermissions", fields: [permissionId], references: [id])
  role       Role?      @relation("RoleBranchPermissions", fields: [roleId], references: [id])
  user       User?      @relation("UserBranchPermissions", fields: [userId], references: [id])

  @@unique([branchId, permissionId, roleId, userId], name: "branch_permission_unique")
  @@index([branchId])
  @@index([permissionId])
  @@index([roleId])
  @@index([userId])
}

model Tenant {
  id                  String                @id @default(uuid())
  name                String
  businessType        String
  contactEmail        String
  contactPhone        String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  address             String?
  currency            String?               @default("KES")
  invoiceFooter       String?
  logoUrl             String?
  timezone            String?               @default("Africa/Nairobi")
  etimsQrUrl          String?
  kraPin              String?
  vatNumber           String?
  annualRevenue       String?
  apiKey              String?
  auditLogsEnabled    Boolean               @default(false)
  backupRestore       Boolean               @default(false)
  businessCategory    String?
  businessDescription String?
  businessHours       Json?
  businessLicense     String?
  businessSubcategory String?
  city                String?
  country             String?
  credits             Float?                @default(0)
  customDomain        String?
  customIntegrations  Boolean               @default(false)
  dashboardLogoUrl    String?
  emailLogoUrl        String?
  employeeCount       String?
  favicon             String?
  foundedYear         Int?
  latitude            Float?
  loginLogoUrl        String?
  logoSettings        Json?
  longitude           Float?
  mobileLogoUrl       String?
  postalCode          String?
  primaryColor        String?
  primaryProducts     Json?
  rateLimit           Int?
  receiptLogo         String?
  secondaryColor      String?
  secondaryProducts   Json?
  socialMedia         Json?
  ssoEnabled          Boolean               @default(false)
  state               String?
  stripeCustomerId    String?               @unique
  taxId               String?
  watermark           String?
  webhookUrl          String?
  website             String?
  whiteLabel          Boolean               @default(false)
  Branch              Branch[]
  Customer            Customer[]
  Feedback            Feedback[]
  Inventory           Inventory[]
  Invoice             Invoice[]
  LoyaltyProgram      LoyaltyProgram[]
  MarketingCampaign   MarketingCampaign[]
  MpesaTransaction    MpesaTransaction[]
  Notification        Notification[]
  Payment             Payment[]
  PaymentMethod       PaymentMethod[]
  roles               Role[]
  Sale                Sale[]
  Subscription        Subscription[]
  TenantConfiguration TenantConfiguration[]
  TenantModule        TenantModule[]
  users               User[]
  UserBranchRole      UserBranchRole[]      @relation("TenantUserBranchRoles")
  userRoles           UserRole[]            @relation("TenantUserRoles")
  categories          Category[]            @relation("TenantCategories")
  userPermissions     UserPermission[]      @relation("TenantUserPermissions")
  products            Product[]             @relation(name: "TenantProducts")

  @@index([name])
}

model AuditLog {
  id        String   @id
  userId    String?
  action    String
  details   Json?
  ip        String?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
}

model Branch {
  id                String             @id @default(uuid())
  name              String
  address           String?
  city              String?
  isMainBranch      Boolean            @default(false)
  state             String?
  country           String?
  postalCode        String?
  phone             String?
  email             String?
  isActive          Boolean            @default(true)
  tenantId          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  tenant            Tenant             @relation(fields: [tenantId], references: [id])
  users             User[]             @relation("UserBranch")
  userRoles         UserRole[]         @relation("BranchUserRoles")
  branchPermissions BranchPermission[] @relation("BranchPermissions")
  sales             Sale[]
  inventories       Inventory[]
  products          Product[]          @relation("BranchProducts")
  UserBranchRole    UserBranchRole[]   @relation("BranchUserBranchRoles")

  @@index([tenantId])
}

model CampaignSegment {
  id                String            @id
  campaignId        String
  segmentType       String
  segmentCriteria   Json?
  recipientCount    Int               @default(0)
  MarketingCampaign MarketingCampaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
}

model Customer {
  id              String           @id
  firstName       String
  lastName        String
  email           String?          @unique
  phone           String?          @unique
  address         String?
  city            String?
  country         String?          @default("Kenya")
  postalCode      String?
  dateOfBirth     DateTime?
  gender          String?
  notes           String?
  tenantId        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  Tenant          Tenant           @relation(fields: [tenantId], references: [id])
  CustomerLoyalty CustomerLoyalty?
  Feedback        Feedback[]
  Purchase        Purchase[]

  @@index([email])
  @@index([phone])
  @@index([tenantId])
}

model CustomerLoyalty {
  id                  String         @id
  customerId          String         @unique
  loyaltyProgramId    String
  points              Int            @default(0)
  totalPointsEarned   Int            @default(0)
  totalPointsRedeemed Int            @default(0)
  lastActivityAt      DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime
  Customer            Customer       @relation(fields: [customerId], references: [id])
  LoyaltyProgram      LoyaltyProgram @relation(fields: [loyaltyProgramId], references: [id])

  @@index([customerId, loyaltyProgramId])
}

model Feedback {
  id         String   @id
  customerId String
  rating     Int
  comment    String?
  response   String?
  status     String   @default("new")
  metadata   Json?
  tenantId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  Customer   Customer @relation(fields: [customerId], references: [id])
  Tenant     Tenant   @relation(fields: [tenantId], references: [id])

  @@index([customerId])
  @@index([status])
  @@index([tenantId])
}

model Inventory {
  id        String   @id
  productId String
  quantity  Int
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  branchId  String?
  branch    Branch?  @relation(fields: [branchId], references: [id])
  product   Product  @relation("ProductInventory", fields: [productId], references: [id])
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@index([branchId])
  @@index([productId])
  @@index([tenantId])
}

model Invoice {
  id             String        @id
  subscriptionId String?
  amount         Float
  status         String
  dueDate        DateTime?
  paidAt         DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  number         String        @unique
  tenantId       String
  Subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  Tenant         Tenant        @relation(fields: [tenantId], references: [id])

  @@index([subscriptionId])
  @@index([tenantId])
}

model LoyaltyProgram {
  id                String            @id
  name              String
  description       String?
  pointsPerShilling Float             @default(0.01)
  minPointsRedeem   Int               @default(100)
  rewardAmount      Float             @default(10.0)
  isActive          Boolean           @default(true)
  tenantId          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  CustomerLoyalty   CustomerLoyalty[]
  Tenant            Tenant            @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model MarketingCampaign {
  id              String            @id
  name            String
  description     String?
  type            String
  subject         String?
  content         String
  status          String            @default("draft")
  scheduledAt     DateTime?
  sentAt          DateTime?
  recipientCount  Int               @default(0)
  openRate        Float?
  clickRate       Float?
  tenantId        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  CampaignSegment CampaignSegment[]
  Tenant          Tenant            @relation(fields: [tenantId], references: [id])

  @@index([scheduledAt])
  @@index([status])
  @@index([tenantId])
}

model Module {
  id           String         @id
  name         String         @unique
  description  String?
  TenantModule TenantModule[]
}

model MpesaTransaction {
  id                String    @id
  userId            String?
  phoneNumber       String
  amount            Float
  status            String    @default("pending")
  mpesaReceipt      String?
  merchantRequestId String?
  responseCode      String?
  responseDesc      String?
  message           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime
  saleData          Json?
  billRefNumber     String?
  businessShortCode String?
  checkoutRequestID String?   @unique
  invoiceNumber     String?
  orgAccountBalance String?
  saleId            String?
  tenantId          String
  thirdPartyTransID String?
  transactionId     String?   @unique
  transactionTime   DateTime?
  transactionType   String?
  sale              Sale?    
  Tenant            Tenant    @relation(fields: [tenantId], references: [id])
  User              User?     @relation(fields: [userId], references: [id])

  @@index([checkoutRequestID])
  @@index([mpesaReceipt])
  @@index([saleId])
  @@index([tenantId])
  @@index([userId])
}

model Notification {
  id        String    @id
  type      String
  title     String
  message   String
  isRead    Boolean   @default(false)
  data      Json?
  tenantId  String
  userId    String?
  createdAt DateTime  @default(now())
  readAt    DateTime?
  Tenant    Tenant    @relation(fields: [tenantId], references: [id])
  User      User?     @relation(fields: [userId], references: [id])
}

model Payment {
  id                    String    @id
  tenantId              String
  stripePaymentIntentId String?   @unique
  amount                Float
  currency              String    @default("USD")
  status                String
  description           String?
  metadata              Json?
  completedAt           DateTime?
  refundedAt            DateTime?
  refundAmount          Float?
  refundReason          String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime
  Tenant                Tenant    @relation(fields: [tenantId], references: [id])

  @@index([createdAt])
  @@index([status])
  @@index([tenantId])
}

model PaymentMethod {
  id        String   @id
  tenantId  String
  type      String
  last4     String?
  brand     String?
  expMonth  Int?
  expYear   Int?
  isDefault Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime
  Tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model Plan {
  id                 String              @id
  name               String
  description        String
  price              Float
  interval           String
  maxUsers           Int?
  maxProducts        Int?
  maxSalesPerMonth   Int?
  analyticsEnabled   Boolean             @default(false)
  advancedReports    Boolean             @default(false)
  prioritySupport    Boolean             @default(false)
  customBranding     Boolean             @default(false)
  apiAccess          Boolean             @default(false)
  isActive           Boolean             @default(true)
  advancedSecurity   Boolean             @default(false)
  auditLogs          Boolean             @default(false)
  backupRestore      Boolean             @default(false)
  bulkOperations     Boolean             @default(false)
  customFields       Boolean             @default(false)
  customIntegrations Boolean             @default(false)
  dataExport         Boolean             @default(false)
  dedicatedSupport   Boolean             @default(false)
  ssoEnabled         Boolean             @default(false)
  stripePriceId      String?             @unique
  whiteLabel         Boolean             @default(false)
  PlanFeatureOnPlan  PlanFeatureOnPlan[]
  Subscription       Subscription[]

  @@index([isActive])
  @@index([name])
}

model PlanFeature {
  id                 String              @id
  featureKey         String              @unique
  featureName        String
  featureDescription String?
  isEnabled          Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime
  PlanFeatureOnPlan  PlanFeatureOnPlan[]
}

model PlanFeatureOnPlan {
  id            String      @id
  planId        String
  featureId     String
  isEnabled     Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  stripePriceId String?     @unique
  PlanFeature   PlanFeature @relation(fields: [featureId], references: [id])
  Plan          Plan        @relation(fields: [planId], references: [id])
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  tenantId    String
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]  @relation("CategoryProducts")
  tenant   Tenant     @relation("TenantCategories", fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([parentId])
}

model Product {
  id          String      @id
  name        String
  sku         String
  price       Float
  cost        Float?
  description String?
  barcode     String?     @unique
  quantity    Int         @default(0)
  minStock    Int         @default(0)
  isActive    Boolean     @default(true)
  categoryId  String?
  branchId    String?
  tenantId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  category    Category?   @relation("CategoryProducts", fields: [categoryId], references: [id])
  branch      Branch?     @relation("BranchProducts", fields: [branchId], references: [id])
  tenant      Tenant      @relation(name: "TenantProducts", fields: [tenantId], references: [id])
  inventory   Inventory[] @relation("ProductInventory")
  saleItems   SaleItem[]  @relation("ProductSaleItems")

  @@index([branchId])
  @@index([tenantId])
  @@index([categoryId])
}

model Purchase {
  id          String   @id
  customerId  String
  saleId      String
  totalAmount Float
  items       Json
  createdAt   DateTime @default(now())
  Customer    Customer @relation(fields: [customerId], references: [id])
  Sale        Sale     @relation(fields: [saleId], references: [id])

  @@index([customerId])
  @@index([saleId])
}

model Sale {
  id                 String           @id
  tenantId           String
  userId             String
  total              Float
  paymentType        String
  createdAt          DateTime         @default(now())
  customerName       String?
  customerPhone      String?
  mpesaTransactionId String?          @unique
  mpesaTransaction   MpesaTransaction? @relation(fields: [mpesaTransactionId], references: [id])
  idempotencyKey     String?
  vatAmount          Float?
  branchId           String?
  amountReceived     Float?
  Purchase           Purchase[]
  Branch             Branch?          @relation(fields: [branchId], references: [id])
  Tenant             Tenant           @relation(fields: [tenantId], references: [id])
  User               User             @relation(fields: [userId], references: [id])
  SaleItem           SaleItem[]

  @@unique([idempotencyKey, userId])
  @@index([branchId])
  @@index([tenantId])
  @@index([userId])
  @@index([mpesaTransactionId])
}

model SaleItem {
  id        String  @id
  saleId    String
  productId String
  quantity  Int
  price     Float
  product   Product @relation("ProductSaleItems", fields: [productId], references: [id])
  sale      Sale    @relation(fields: [saleId], references: [id])

  @@index([productId])
  @@index([saleId])
}

model Subscription {
  id                     String    @id
  tenantId               String
  planId                 String
  status                 String
  currentPeriodStart     DateTime
  currentPeriodEnd       DateTime
  cancelAtPeriodEnd      Boolean   @default(false)
  trialEnd               DateTime?
  canceledAt             DateTime?
  stripeCurrentPeriodEnd DateTime
  stripeCustomerId       String
  stripePriceId          String
  stripeSubscriptionId   String    @unique
  trialStart             DateTime?
  userId                 String
  Invoice                Invoice[]
  Plan                   Plan      @relation(fields: [planId], references: [id])
  Tenant                 Tenant    @relation(fields: [tenantId], references: [id])
  User                   User      @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@index([tenantId])
  @@index([userId])
}

model SystemConfiguration {
  id          String   @id
  key         String   @unique
  value       String
  description String?
  category    String
  isEncrypted Boolean  @default(false)
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([category])
  @@index([key])
}

model TenantConfiguration {
  id          String   @id
  tenantId    String
  key         String
  value       String
  description String?
  category    String
  isEncrypted Boolean  @default(false)
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, key])
  @@index([category])
  @@index([key])
  @@index([tenantId])
}

model RefreshToken {
  id             String   @id @default(uuid())
  token          String   @unique
  userId         String
  userAgent      String?
  ipAddress      String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt      DateTime
  lastActivityAt DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([token])
  @@index([userId])
}

model Session {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token          String   @unique
  ipAddress      String?
  userAgent      String?
  expiresAt      DateTime
  lastActivityAt DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([token])
  @@index([userId])
}

model TenantModule {
  id       String  @id
  tenantId String
  moduleId String
  enabled  Boolean @default(true)
  Module   Module  @relation(fields: [moduleId], references: [id])
  Tenant   Tenant  @relation(fields: [tenantId], references: [id])
}

model UserBranchRole {
  id       String @id
  userId   String
  branchId String
  roleId   String
  tenantId String
  Branch   Branch @relation("BranchUserBranchRoles", fields: [branchId], references: [id])
  Role     Role   @relation("RoleUserBranchRoles", fields: [roleId], references: [id])
  Tenant   Tenant @relation("TenantUserBranchRoles", fields: [tenantId], references: [id])
  User     User   @relation("UserUserBranchRoles", fields: [userId], references: [id])

  @@unique([userId, branchId, roleId])
}

model UserPermission {
  id            String     @id @default(uuid())
  userId        String
  user          User       @relation("UserUserPermissions", fields: [userId], references: [id])
  permission    String
  permissionRef Permission @relation("PermissionUserPermissions", fields: [permission], references: [name])
  grantedBy     String?
  grantedAt     DateTime   @default(now())
  tenant        Tenant     @relation("TenantUserPermissions", fields: [tenantId], references: [id])
  tenantId      String
  grantedByUser User?      @relation("UserPermissions", fields: [grantedBy], references: [id])

  @@unique([userId, permission, tenantId])
}
