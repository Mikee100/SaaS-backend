// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
<<<<<<< HEAD
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  userPermissions UserPermission[]
  rolePermissions RolePermission[]
}

model UserPermission {
  id              String     @id @default(uuid())
  userId          String
  user            User       @relation("Permission", fields: [userId], references: [id])
  permission      String
  permissionRef   Permission @relation(fields: [permission], references: [name])
  grantedBy       String?
  grantedAt       DateTime   @default(now())
  tenant          Tenant     @relation(fields: [tenantId], references: [id])
  tenantId        String
  userPermissions User?      @relation("UserPermissions", fields: [grantedBy], references: [id])

  @@unique([userId, permission, tenantId])
=======
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  rolePermissions RolePermission[]
  UserPermission  UserPermission[]
>>>>>>> a9ab4d8c5762126916fa97fc22de1f53d95703c1
}

model Product {
  id           String      @id @default(uuid())
  name         String
  sku          String
  price        Float
  cost         Float       @default(0)
  description  String?
  stock        Int         @default(0)
  tenantId     String
  tenant       Tenant      @relation(fields: [tenantId], references: [id])
  inventory    Inventory[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  saleItems    SaleItem[]
  customFields Json?
  branchId     String?
  branch       Branch?     @relation(fields: [branchId], references: [id])

  @@index([tenantId])
  @@index([branchId])
}

model Inventory {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  branchId  String?
  branch    Branch?  @relation(fields: [branchId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
  @@index([productId])
  @@index([branchId])
}

model Sale {
  id                 String             @id @default(uuid())
  tenantId           String
  tenant             Tenant             @relation(fields: [tenantId], references: [id])
  userId             String
  user               User               @relation(fields: [userId], references: [id])
  total              Float
  paymentType        String
<<<<<<< HEAD
=======
  amountReceived     Float? // Amount received from the customer
>>>>>>> a9ab4d8c5762126916fa97fc22de1f53d95703c1
  items              SaleItem[]
  createdAt          DateTime           @default(now())
  customerName       String?
  customerPhone      String?
  mpesaTransactionId String?            @unique
  mpesaTransactions  MpesaTransaction[]
  idempotencyKey     String?
  vatAmount          Float? // KRA VAT amount
  branchId           String?
  branch             Branch?            @relation(fields: [branchId], references: [id])
<<<<<<< HEAD
=======
  purchases          Purchase[]         @relation("PurchaseToSale")
>>>>>>> a9ab4d8c5762126916fa97fc22de1f53d95703c1

  @@unique([idempotencyKey, userId])
  @@index([tenantId])
  @@index([userId])
  @@index([branchId])
}

model SaleItem {
  id        String  @id @default(uuid())
  saleId    String
  sale      Sale    @relation(fields: [saleId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float

  @@index([productId])
}

model Module {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  tenants     TenantModule[]
}

model TenantModule {
  id       String  @id @default(uuid())
  tenantId String
  moduleId String
  enabled  Boolean @default(true)
  tenant   Tenant  @relation(fields: [tenantId], references: [id])
  module   Module  @relation(fields: [moduleId], references: [id])
}

model MpesaTransaction {
  id                String    @id @default(uuid())
  userId            String?
  user              User?     @relation(fields: [userId], references: [id])
  phoneNumber       String
  amount            Float
  status            String    @default("pending")
  merchantRequestId String?
  checkoutRequestID String?   @unique
  mpesaReceipt      String?
  responseCode      String?
  responseDesc      String?
  message           String?
  saleId            String?
  sale              Sale?     @relation(fields: [saleId], references: [id])
  saleData          Json?
  transactionId     String?   @unique
  transactionType   String?
  transactionTime   DateTime?
  businessShortCode String?
  billRefNumber     String?
  invoiceNumber     String?
  orgAccountBalance String?
  thirdPartyTransID String?
  tenantId          String
  tenant            Tenant    @relation(fields: [tenantId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
  @@index([saleId])
  @@index([tenantId])
  @@index([checkoutRequestID])
  @@index([mpesaReceipt])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  details   Json?
  ip        String?
  createdAt DateTime @default(now())
}

model Role {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]
  userRoles       UserRole[]
  userBranchRoles UserBranchRole[]
  tenant          Tenant?          @relation(fields: [tenantId], references: [id])
  tenantId        String?

  @@unique([name, tenantId])
<<<<<<< HEAD
=======
}

model UserPermission {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
  tenant       Tenant     @relation(fields: [tenantId], references: [id])
  tenantId     String

  @@unique([userId, permissionId, tenantId])
  @@index([userId])
  @@index([permissionId])
  @@index([tenantId])
>>>>>>> a9ab4d8c5762126916fa97fc22de1f53d95703c1
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id])
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
}

model UserRole {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  role     Role   @relation(fields: [roleId], references: [id])
  roleId   String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String

  @@unique([userId, roleId, tenantId])
  @@index([userId])
  @@index([roleId])
  @@index([tenantId])
}

model Plan {
  id               String  @id @default(uuid())
  name             String
  description      String
  price            Float
  interval         String // 'month' or 'year'
  isActive         Boolean @default(true)
  maxUsers         Int? // Nullable, no default
  maxProducts      Int? // Nullable, no default
  maxSalesPerMonth Int? // Nullable, no default
  stripePriceId    String? @unique

  // Plan Features
  analyticsEnabled   Boolean @default(false)
  advancedReports    Boolean @default(false)
  prioritySupport    Boolean @default(false)
  customBranding     Boolean @default(false)
  apiAccess          Boolean @default(false)
  bulkOperations     Boolean @default(false)
  dataExport         Boolean @default(false)
  customFields       Boolean @default(false)
  advancedSecurity   Boolean @default(false)
  whiteLabel         Boolean @default(false)
  dedicatedSupport   Boolean @default(false)
  ssoEnabled         Boolean @default(false)
  auditLogs          Boolean @default(false)
  backupRestore      Boolean @default(false)
  customIntegrations Boolean @default(false)

  // Relations
  subscriptions Subscription[]
  features      PlanFeatureOnPlan[]

  @@index([name])
  @@index([isActive])
}

model PlanFeature {
  id                 String              @id @default(uuid())
  featureKey         String              @unique
  featureName        String
  featureDescription String?
  isEnabled          Boolean             @default(true)
  plans              PlanFeatureOnPlan[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model PlanFeatureOnPlan {
  id        String      @id @default(uuid())
  planId    String
  plan      Plan        @relation(fields: [planId], references: [id])
  featureId String
  feature   PlanFeature @relation(fields: [featureId], references: [id])
  isEnabled Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  stripePriceId String? @unique
}

model Subscription {
  id                     String    @id @default(uuid())
  stripeSubscriptionId   String    @unique
  stripeCustomerId       String
  stripePriceId          String
  stripeCurrentPeriodEnd DateTime
  status                 String // 'active', 'past_due', 'canceled', 'unpaid', 'incomplete', 'incomplete_expired', 'trialing'
  canceledAt             DateTime? // When the subscription was canceled
  currentPeriodStart     DateTime
  currentPeriodEnd       DateTime
  cancelAtPeriodEnd      Boolean   @default(false)
  trialStart             DateTime?
  trialEnd               DateTime?

  // Relations
  planId   String
  plan     Plan      @relation(fields: [planId], references: [id])
  tenantId String
  tenant   Tenant    @relation("TenantSubscriptions", fields: [tenantId], references: [id])
  userId   String
  user     User      @relation("UserSubscriptions", fields: [userId], references: [id])
  invoices Invoice[]

  @@index([stripeSubscriptionId])
  @@index([stripeCustomerId])
  @@index([status])
  @@index([tenantId])
  @@index([userId])
}

model Invoice {
  id             String        @id @default(uuid())
  number         String        @unique
  amount         Float
  status         String // 'draft', 'open', 'paid', 'void', 'uncollectible'
  dueDate        DateTime?
  paidAt         DateTime?
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  tenantId       String
  tenant         Tenant        @relation(fields: [tenantId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([tenantId])
  @@index([subscriptionId])
}

model Payment {
  id                    String    @id @default(uuid())
  tenantId              String
  tenant                Tenant    @relation(fields: [tenantId], references: [id])
  stripePaymentIntentId String?   @unique
  amount                Float
  currency              String    @default("USD")
  status                String // pending, completed, failed, canceled
  description           String?
  metadata              Json?
  completedAt           DateTime?
  refundedAt            DateTime?
  refundAmount          Float?
  refundReason          String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([tenantId])
  @@index([status])
  @@index([createdAt])
}

model PaymentMethod {
  id        String   @id @default(uuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  type      String // card, bank_account, mpesa
  last4     String?
  brand     String? // visa, mastercard, etc.
  expMonth  Int?
  expYear   Int?
  isDefault Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
}

model Branch {
  id           String           @id @default(uuid())
  name         String
  address      String?
  street       String?
  city         String?
  state        String?
  country      String?
  postalCode   String?
  phone        String?
  email        String?
  manager      String? // Could be a userId if you want a relation
  openingHours String?
  status       String? // 'active' or 'inactive'
  logo         String?
  customField  String?
  tenantId     String
  tenant       Tenant           @relation(fields: [tenantId], references: [id])
  users        UserBranchRole[]
  products     Product[] // If you want branch-specific products/inventory
  sales        Sale[] // If you want branch-specific sales
  inventories  Inventory[]
  branchUsers  User[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([tenantId])
}

model UserBranchRole {
  id       String @id @default(uuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  branchId String
  branch   Branch @relation(fields: [branchId], references: [id])
  roleId   String
  role     Role   @relation(fields: [roleId], references: [id])
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String

  @@unique([userId, branchId, roleId])
}

model SystemConfiguration {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  category    String // 'security', 'api', 'external_services', 'email', 'general'
  isEncrypted Boolean  @default(false)
  isPublic    Boolean  @default(false) // Whether this can be exposed to frontend
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([key])
}

model TenantConfiguration {
  id          String   @id @default(uuid())
  tenantId    String
  key         String
  value       String
  description String?
  category    String // 'stripe', 'payment', 'billing', 'general'
  isEncrypted Boolean  @default(false)
  isPublic    Boolean  @default(false) // Whether this can be exposed to frontend
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, key])
  @@index([tenantId])
  @@index([category])
  @@index([key])
}

<<<<<<< HEAD
=======
model Customer {
  id          String           @id @default(uuid())
  firstName   String
  lastName    String
  email       String?          @unique
  phone       String?          @unique
  address     String?
  city        String?
  country     String?          @default("Kenya")
  postalCode  String?
  dateOfBirth DateTime?
  gender      String?
  notes       String?
  tenantId    String
  tenant      Tenant           @relation(fields: [tenantId], references: [id])
  purchases   Purchase[]
  loyalty     CustomerLoyalty?
  feedbacks   Feedback[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([tenantId])
  @@index([email])
  @@index([phone])
}

model Purchase {
  id          String   @id @default(uuid())
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id])
  saleId      String
  sale        Sale     @relation(fields: [saleId], references: [id], name: "PurchaseToSale")
  totalAmount Float
  items       Json // Array of items in the purchase
  createdAt   DateTime @default(now())

  @@index([customerId])
  @@index([saleId])
}

model LoyaltyProgram {
  id                String            @id @default(uuid())
  name              String
  description       String?
  pointsPerShilling Float             @default(0.01) // Points earned per shilling spent
  minPointsRedeem   Int               @default(100) // Minimum points needed to redeem
  rewardAmount      Float             @default(10.0) // Reward amount when points are redeemed
  isActive          Boolean           @default(true)
  tenantId          String
  tenant            Tenant            @relation(fields: [tenantId], references: [id])
  customerLoyalties CustomerLoyalty[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([tenantId])
}

model CustomerLoyalty {
  id                  String         @id @default(uuid())
  customerId          String         @unique
  customer            Customer       @relation(fields: [customerId], references: [id])
  loyaltyProgramId    String
  loyaltyProgram      LoyaltyProgram @relation(fields: [loyaltyProgramId], references: [id])
  points              Int            @default(0)
  totalPointsEarned   Int            @default(0)
  totalPointsRedeemed Int            @default(0)
  lastActivityAt      DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@index([customerId, loyaltyProgramId])
}

model Feedback {
  id         String   @id @default(uuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  rating     Int // 1-5 scale
  comment    String?
  response   String? // Staff response to feedback
  status     String   @default("new") // new, in_review, resolved
  metadata   Json? // Additional metadata
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([customerId])
  @@index([tenantId])
  @@index([status])
}

model MarketingCampaign {
  id             String            @id @default(uuid())
  name           String
  description    String?
  type           String // email, sms, push
  subject        String?
  content        String
  status         String            @default("draft") // draft, scheduled, sent, cancelled
  scheduledAt    DateTime?
  sentAt         DateTime?
  recipientCount Int               @default(0)
  openRate       Float? // For email campaigns
  clickRate      Float? // For email campaigns
  tenantId       String
  tenant         Tenant            @relation(fields: [tenantId], references: [id])
  segments       CampaignSegment[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([tenantId])
  @@index([status])
  @@index([scheduledAt])
}

model CampaignSegment {
  id              String            @id @default(uuid())
  campaignId      String
  campaign        MarketingCampaign @relation(fields: [campaignId], references: [id])
  segmentType     String // all_customers, specific_segment
  segmentCriteria Json? // Criteria for the segment
  recipientCount  Int               @default(0)

  @@index([campaignId])
}

>>>>>>> a9ab4d8c5762126916fa97fc22de1f53d95703c1
model Tenant {
  id                  String                @id @default(uuid())
  name                String
  businessType        String
  contactEmail        String
  contactPhone        String?
  // Enhanced business information
  businessCategory    String?
  businessSubcategory String?
  primaryProducts     Json?
  secondaryProducts   Json?
  businessDescription String?
  // Location information
  address             String?
  city                String?
  state               String?
  country             String?
  postalCode          String?
  latitude            Float?
  longitude           Float?
  // Business details
  foundedYear         Int?
  employeeCount       String?
  annualRevenue       String?
  businessHours       Json?
  website             String?
  socialMedia         Json?
  // Legal and compliance
  kraPin              String?
  vatNumber           String?
  etimsQrUrl          String?
  businessLicense     String?
  taxId               String?
  // Financial settings
  currency            String?               @default("KES")
  timezone            String?               @default("Africa/Nairobi")
  invoiceFooter       String?
  credits             Float?                @default(0) // Account balance for one-time payments
  logoUrl             String?
  loginLogoUrl        String? // URL for login page logo
  favicon             String?
  receiptLogo         String?
  watermark           String?
  dashboardLogoUrl    String?
  emailLogoUrl        String?
  mobileLogoUrl       String?
  logoSettings        Json?
  // Enterprise features
  primaryColor        String?
  secondaryColor      String?
  customDomain        String?
  whiteLabel          Boolean               @default(false)
  apiKey              String?
  webhookUrl          String?
  rateLimit           Int?
  customIntegrations  Boolean               @default(false)
  ssoEnabled          Boolean               @default(false)
  auditLogsEnabled    Boolean               @default(false) // Renamed to avoid conflict
  backupRestore       Boolean               @default(false)
  stripeCustomerId    String?               @unique
  // Timestamps
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  // Relations
  users               User[]
  products            Product[]
  inventory           Inventory[]
  sales               Sale[]
  modules             TenantModule[]
  subscriptions       Subscription[]        @relation("TenantSubscriptions")
  invoices            Invoice[]
  payments            Payment[]
  paymentMethods      PaymentMethod[]
  branches            Branch[]
  configurations      TenantConfiguration[]
  userRoles           UserRole[]
  userBranchRoles     UserBranchRole[]
  mpesaTransactions   MpesaTransaction[]
  notifications       Notification[]
<<<<<<< HEAD
  userPermissions     UserPermission[]
  roles               Role[]
}

model User {
  id                      String           @id @default(uuid())
  email                   String           @unique
  password                String
  name                    String
  isSuperadmin            Boolean          @default(false)
=======
  customers           Customer[]
  loyaltyPrograms     LoyaltyProgram[]
  feedbacks           Feedback[]
  marketingCampaigns  MarketingCampaign[]
  roles               Role[]
  UserPermission      UserPermission[]
}

model User {
  id                      String     @id @default(uuid())
  email                   String     @unique
  password                String
  name                    String
  isSuperadmin            Boolean    @default(false)
>>>>>>> a9ab4d8c5762126916fa97fc22de1f53d95703c1
  resetPasswordToken      String?
  resetPasswordExpires    DateTime?
  notificationPreferences Json?
  language                String?
  region                  String?
<<<<<<< HEAD
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  // Relations
  userRoles               UserRole[]
  userPermissions         UserPermission[] @relation("Permission")
  permissions             UserPermission[] @relation("UserPermissions")
=======
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  // Relations
  userRoles               UserRole[]
  // ...existing code...
>>>>>>> a9ab4d8c5762126916fa97fc22de1f53d95703c1

  sales             Sale[]
  mpesaTransactions MpesaTransaction[]
  auditLogs         AuditLog[]
  userBranchRoles   UserBranchRole[]
  tenant            Tenant?            @relation(fields: [tenantId], references: [id])
  tenantId          String?
  branchId          String?
  branch            Branch?            @relation(fields: [branchId], references: [id])
  subscriptions     Subscription[]     @relation("UserSubscriptions")
  notifications     Notification[]     @relation("UserNotifications")
<<<<<<< HEAD
=======
  UserPermission    UserPermission[]
>>>>>>> a9ab4d8c5762126916fa97fc22de1f53d95703c1

  @@index([email])
  @@index([resetPasswordToken])
  @@index([branchId])
}

model Notification {
  id        String    @id @default(uuid())
  type      String // e.g., 'system', 'payment', 'subscription'
  title     String
  message   String
  isRead    Boolean   @default(false)
  data      Json? // Additional data for the notification
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  tenantId  String
  user      User?     @relation("UserNotifications", fields: [userId], references: [id])
  userId    String?
  createdAt DateTime  @default(now())
  readAt    DateTime?
}
