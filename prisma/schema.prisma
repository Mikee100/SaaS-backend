generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String             @id @default(uuid())
  email                   String             @unique
  password                String
  name                    String
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  resetPasswordExpires    DateTime?
  resetPasswordToken      String?
  language                String?
  notificationPreferences Json?
  region                  String?
  isSuperadmin            Boolean            @default(false)
  tenantId                String?
  branchId                String?
  AuditLog                AuditLog[]
  MpesaTransaction        MpesaTransaction[]
  Notification            Notification[]
  Sale                    Sale[]
  Subscription            Subscription[]
  Branch                  Branch?            @relation("UserBranch", fields: [branchId], references: [id])
  tenant                  Tenant?            @relation(fields: [tenantId], references: [id])
  UserBranchRole          UserBranchRole[]   @relation("UserUserBranchRoles")
  grantedPermissions      UserPermission[]   @relation("UserPermissions")
  userPermissions         UserPermission[]   @relation("UserUserPermissions")
  userRoles               UserRole[]         @relation("UserUserRoles")

  @@index([email])
  @@index([branchId])
  @@index([resetPasswordToken])
}

model Role {
  id             String           @id @default(uuid())
  name           String           @unique
  description    String?
  createdAt      DateTime         @default(now())
  tenantId       String?
  updatedAt      DateTime         @updatedAt
  tenant         Tenant?          @relation(fields: [tenantId], references: [id])
  permissions    RolePermission[]
  UserBranchRole UserBranchRole[] @relation("RoleUserBranchRoles")
  userRoles      UserRole[]       @relation("RoleUserRoles")

  @@unique([name, tenantId])
}

model Permission {
  id              String           @id @default(uuid())
  description     String?
  name            String           @unique
  rolePermissions RolePermission[]
  userPermissions UserPermission[] @relation("PermissionUserPermissions")
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])
}

model UserRole {
  id       String @id @default(uuid())
  userId   String
  roleId   String
  tenantId String
  role     Role   @relation("RoleUserRoles", fields: [roleId], references: [id])
  tenant   Tenant @relation("TenantUserRoles", fields: [tenantId], references: [id])
  user     User   @relation("UserUserRoles", fields: [userId], references: [id])

  @@unique([userId, roleId, tenantId])
  @@index([roleId])
  @@index([tenantId])
  @@index([userId])
}

model Tenant {
  id                  String                @id @default(uuid())
  name                String
  businessType        String
  contactEmail        String
  contactPhone        String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  address             String?
  currency            String?               @default("KES")
  logoUrl             String?
  timezone            String?               @default("Africa/Nairobi")
  vatNumber           String?
  city                String?
  country             String?
  taxId               String?
  website             String?
  annualRevenue       String?
  apiKey              String?
  backupRestore       Boolean               @default(false)
  businessCategory    String?
  businessDescription String?
  businessHours       Json?
  businessLicense     String?
  businessSubcategory String?
  customDomain        String?
  customIntegrations  Boolean               @default(false)
  employeeCount       String?
  etimsQrUrl          String?
  favicon             String?
  foundedYear         Int?
  invoiceFooter       String?
  kraPin              String?
  latitude            Float?
  longitude           Float?
  postalCode          String?
  primaryColor        String?
  primaryProducts     Json?
  rateLimit           Int?
  receiptLogo         String?
  secondaryColor      String?
  secondaryProducts   Json?
  socialMedia         Json?
  ssoEnabled          Boolean               @default(false)
  state               String?
  stripeCustomerId    String?               @unique
  watermark           String?
  webhookUrl          String?
  whiteLabel          Boolean               @default(false)
  dashboardLogoUrl    String?
  emailLogoUrl        String?
  loginLogoUrl        String?
  logoSettings        Json?
  mobileLogoUrl       String?
  auditLogsEnabled    Boolean               @default(false)
  credits             Float?                @default(0)
  Branch              Branch[]
  Inventory           Inventory[]
  Invoice             Invoice[]
  MpesaTransaction    MpesaTransaction[]
  Notification        Notification[]
  Payment             Payment[]
  PaymentMethod       PaymentMethod[]
  products            Product[]             @relation("TenantProducts")
  roles               Role[]
  Sale                Sale[]
  Subscription        Subscription[]
  TenantConfiguration TenantConfiguration[]
  TenantModule        TenantModule[]
  users               User[]
  UserBranchRole      UserBranchRole[]      @relation("TenantUserBranchRoles")
  userPermissions     UserPermission[]      @relation("TenantUserPermissions")
  userRoles           UserRole[]            @relation("TenantUserRoles")
}

model AuditLog {
  id        String   @id
  userId    String?
  action    String
  details   Json?
  ip        String?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
}

model Branch {
  id             String           @id @default(uuid())
  name           String
  address        String?
  tenantId       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  city           String?
  country        String?
  customField    String?
  email          String?
  logo           String?
  manager        String?
  openingHours   String?
  phone          String?
  postalCode     String?
  state          String?
  status         String?
  street         String?
  tenant         Tenant           @relation(fields: [tenantId], references: [id])
  inventories    Inventory[]
  products       Product[]        @relation("BranchProducts")
  sales          Sale[]
  users          User[]           @relation("UserBranch")
  UserBranchRole UserBranchRole[] @relation("BranchUserBranchRoles")

  @@index([tenantId])
}

model Inventory {
  id        String   @id
  productId String
  quantity  Int
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  branchId  String?
  branch    Branch?  @relation(fields: [branchId], references: [id])
  product   Product  @relation("ProductInventory", fields: [productId], references: [id])
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@index([branchId])
  @@index([productId])
  @@index([tenantId])
}

model Invoice {
  id             String        @id
  subscriptionId String?
  amount         Float
  status         String
  dueDate        DateTime?
  paidAt         DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  tenantId       String
  number         String        @unique
  Subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  Tenant         Tenant        @relation(fields: [tenantId], references: [id])

  @@index([subscriptionId])
  @@index([tenantId])
}

model Module {
  id           String         @id
  name         String         @unique
  description  String?
  TenantModule TenantModule[]
}

model MpesaTransaction {
  id                                 String    @id
  userId                             String?
  phoneNumber                        String
  amount                             Float
  status                             String    @default("pending")
  mpesaReceipt                       String?
  merchantRequestId                  String?
  responseCode                       String?
  responseDesc                       String?
  message                            String?
  createdAt                          DateTime  @default(now())
  updatedAt                          DateTime
  saleData                           Json?
  billRefNumber                      String?
  businessShortCode                  String?
  checkoutRequestID                  String?   @unique
  invoiceNumber                      String?
  orgAccountBalance                  String?
  saleId                             String?
  tenantId                           String
  thirdPartyTransID                  String?
  transactionId                      String?   @unique
  transactionTime                    DateTime?
  transactionType                    String?
  Sale_MpesaTransaction_saleIdToSale Sale?     @relation("MpesaTransaction_saleIdToSale", fields: [saleId], references: [id])
  Tenant                             Tenant    @relation(fields: [tenantId], references: [id])
  User                               User?     @relation(fields: [userId], references: [id])
  sale                               Sale?

  @@index([checkoutRequestID])
  @@index([mpesaReceipt])
  @@index([saleId])
  @@index([tenantId])
  @@index([userId])
}

model Notification {
  id        String    @id
  type      String
  title     String
  message   String
  isRead    Boolean   @default(false)
  data      Json?
  tenantId  String
  userId    String?
  createdAt DateTime  @default(now())
  readAt    DateTime?
  Tenant    Tenant    @relation(fields: [tenantId], references: [id])
  User      User?     @relation(fields: [userId], references: [id])
}

model Payment {
  id                    String    @id
  tenantId              String
  stripePaymentIntentId String?   @unique
  amount                Float
  currency              String    @default("USD")
  status                String
  description           String?
  metadata              Json?
  completedAt           DateTime?
  refundedAt            DateTime?
  refundAmount          Float?
  refundReason          String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime
  Tenant                Tenant    @relation(fields: [tenantId], references: [id])

  @@index([createdAt])
  @@index([status])
  @@index([tenantId])
}

model PaymentMethod {
  id        String   @id
  tenantId  String
  type      String
  last4     String?
  brand     String?
  isDefault Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime
  expMonth  Int?
  expYear   Int?
  Tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model Plan {
  id                 String              @id
  name               String
  description        String
  price              Float
  interval           String
  maxUsers           Int?
  maxProducts        Int?
  maxSalesPerMonth   Int?
  analyticsEnabled   Boolean             @default(false)
  advancedReports    Boolean             @default(false)
  prioritySupport    Boolean             @default(false)
  customBranding     Boolean             @default(false)
  apiAccess          Boolean             @default(false)
  isActive           Boolean             @default(true)
  advancedSecurity   Boolean             @default(false)
  auditLogs          Boolean             @default(false)
  backupRestore      Boolean             @default(false)
  bulkOperations     Boolean             @default(false)
  customFields       Boolean             @default(false)
  customIntegrations Boolean             @default(false)
  dataExport         Boolean             @default(false)
  dedicatedSupport   Boolean             @default(false)
  ssoEnabled         Boolean             @default(false)
  whiteLabel         Boolean             @default(false)
  stripePriceId      String?             @unique
  PlanFeatureOnPlan  PlanFeatureOnPlan[]
  Subscription       Subscription[]

  @@index([isActive])
  @@index([name])
}

model PlanFeature {
  id                 String              @id
  featureKey         String              @unique
  featureName        String
  featureDescription String?
  isEnabled          Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime
  PlanFeatureOnPlan  PlanFeatureOnPlan[]
}

model PlanFeatureOnPlan {
  id            String      @id
  planId        String
  featureId     String
  isEnabled     Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  stripePriceId String?     @unique
  PlanFeature   PlanFeature @relation(fields: [featureId], references: [id])
  Plan          Plan        @relation(fields: [planId], references: [id])
}

model Product {
  id           String      @id
  name         String
  sku          String
  price        Float
  description  String?
  tenantId     String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  stock        Int         @default(0)
  customFields Json?
  branchId     String?
  cost         Float       @default(0)
  inventory    Inventory[] @relation("ProductInventory")
  branch       Branch?     @relation("BranchProducts", fields: [branchId], references: [id])
  tenant       Tenant      @relation("TenantProducts", fields: [tenantId], references: [id])
  saleItems    SaleItem[]  @relation("ProductSaleItems")

  @@index([branchId])
  @@index([tenantId])
}

model Sale {
  id                                             String             @id
  tenantId                                       String
  userId                                         String
  total                                          Float
  paymentType                                    String
  createdAt                                      DateTime           @default(now())
  customerName                                   String?
  customerPhone                                  String?
  mpesaTransactionId                             String?            @unique
  idempotencyKey                                 String?
  vatAmount                                      Float?
  branchId                                       String?
  MpesaTransaction_MpesaTransaction_saleIdToSale MpesaTransaction[] @relation("MpesaTransaction_saleIdToSale")
  Branch                                         Branch?            @relation(fields: [branchId], references: [id])
  mpesaTransaction                               MpesaTransaction?  @relation(fields: [mpesaTransactionId], references: [id])
  Tenant                                         Tenant             @relation(fields: [tenantId], references: [id])
  User                                           User               @relation(fields: [userId], references: [id])
  SaleItem                                       SaleItem[]

  @@unique([idempotencyKey, userId])
  @@index([branchId])
  @@index([tenantId])
  @@index([userId])
}

model SaleItem {
  id        String  @id
  saleId    String
  productId String
  quantity  Int
  price     Float
  product   Product @relation("ProductSaleItems", fields: [productId], references: [id])
  sale      Sale    @relation(fields: [saleId], references: [id])

  @@index([productId])
}

model Subscription {
  id                     String    @id
  tenantId               String
  planId                 String
  status                 String
  currentPeriodStart     DateTime
  currentPeriodEnd       DateTime
  cancelAtPeriodEnd      Boolean   @default(false)
  canceledAt             DateTime?
  stripePriceId          String
  stripeSubscriptionId   String    @unique
  stripeCurrentPeriodEnd DateTime
  stripeCustomerId       String
  trialEnd               DateTime?
  trialStart             DateTime?
  userId                 String
  Invoice                Invoice[]
  Plan                   Plan      @relation(fields: [planId], references: [id])
  Tenant                 Tenant    @relation(fields: [tenantId], references: [id])
  User                   User      @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@index([tenantId])
  @@index([userId])
}

model SystemConfiguration {
  id          String   @id
  key         String   @unique
  value       String
  description String?
  category    String
  isEncrypted Boolean  @default(false)
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([category])
  @@index([key])
}

model TenantConfiguration {
  id          String   @id
  tenantId    String
  key         String
  value       String
  description String?
  category    String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  isEncrypted Boolean  @default(false)
  Tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, key])
  @@index([category])
  @@index([key])
  @@index([tenantId])
}

model TenantModule {
  id       String  @id
  tenantId String
  moduleId String
  enabled  Boolean @default(true)
  Module   Module  @relation(fields: [moduleId], references: [id])
  Tenant   Tenant  @relation(fields: [tenantId], references: [id])
}

model UserBranchRole {
  id       String @id
  userId   String
  branchId String
  roleId   String
  tenantId String
  Branch   Branch @relation("BranchUserBranchRoles", fields: [branchId], references: [id])
  Role     Role   @relation("RoleUserBranchRoles", fields: [roleId], references: [id])
  Tenant   Tenant @relation("TenantUserBranchRoles", fields: [tenantId], references: [id])
  User     User   @relation("UserUserBranchRoles", fields: [userId], references: [id])

  @@unique([userId, branchId, roleId])
}

model UserPermission {
  id            String     @id @default(uuid())
  userId        String
  permission    String
  permissionRef Permission @relation("PermissionUserPermissions", fields: [permission], references: [name])
  grantedBy     String?
  grantedAt     DateTime   @default(now())
  tenantId      String
  tenant        Tenant     @relation("TenantUserPermissions", fields: [tenantId], references: [id])
  user          User       @relation("UserUserPermissions", fields: [userId], references: [id])
  grantedByUser User?      @relation("UserPermissions", fields: [grantedBy], references: [id])

  @@unique([userId, permission, tenantId])
}
